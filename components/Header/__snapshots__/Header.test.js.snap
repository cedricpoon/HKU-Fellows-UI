// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Header Component renders as expected with back button 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    backable={true}
    onRightPress={[Function]}
    subtitle={null}
    subtitleNumberOfLines={1}
    title="Header"
    titleNumberOfLines={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Left)>
          <Styled(Button)
            onPress={[Function]}
            transparent={true}
          >
            <Styled(Icon)
              name="arrow-dropleft"
              style={
                Object {
                  "color": "#4E4A47",
                }
              }
            />
          </Styled(Button)>
        </Styled(Left)>,
        <Styled(Body)
          style={
            Object {
              "flex": 4,
            }
          }
        >
          <Styled(Title)
            numberOfLines={1}
            style={
              Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              }
            }
          >
            Header
          </Styled(Title)>
        </Styled(Body)>,
        <Styled(Right) />,
      ],
      "style": Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      "subtitle": null,
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(Button)
            onPress={[Function]}
            transparent={true}
          >
            <Styled(Icon)
              name="arrow-dropleft"
              style={
                Object {
                  "color": "#4E4A47",
                }
              }
            />
          </Styled(Button)>,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Icon)
              name="arrow-dropleft"
              style={
                Object {
                  "color": "#4E4A47",
                }
              }
            />,
            "onPress": [Function],
            "transparent": true,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "arrow-dropleft",
              "style": Object {
                "color": "#4E4A47",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>,
            null,
          ],
          "style": Object {
            "flex": 4,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Header",
              "numberOfLines": 1,
              "style": Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              },
              "virtual": undefined,
            },
            "ref": [Function],
            "rendered": "Header",
            "type": [Function],
          },
          null,
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Left)>
            <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="arrow-dropleft"
                style={
                  Object {
                    "color": "#4E4A47",
                  }
                }
              />
            </Styled(Button)>
          </Styled(Left)>,
          <Styled(Body)
            style={
              Object {
                "flex": 4,
              }
            }
          >
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>
          </Styled(Body)>,
          <Styled(Right) />,
        ],
        "style": Object {
          "height": "auto",
          "paddingBottom": 0.5,
        },
        "subtitle": null,
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="arrow-dropleft"
                style={
                  Object {
                    "color": "#4E4A47",
                  }
                }
              />
            </Styled(Button)>,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Icon)
                name="arrow-dropleft"
                style={
                  Object {
                    "color": "#4E4A47",
                  }
                }
              />,
              "onPress": [Function],
              "transparent": true,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "arrow-dropleft",
                "style": Object {
                  "color": "#4E4A47",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Title)
                numberOfLines={1}
                style={
                  Object {
                    "fontSize": 15,
                    "fontWeight": "normal",
                    "textAlign": "justify",
                  }
                }
              >
                Header
              </Styled(Title)>,
              null,
            ],
            "style": Object {
              "flex": 4,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Header",
                "numberOfLines": 1,
                "style": Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                },
                "virtual": undefined,
              },
              "ref": [Function],
              "rendered": "Header",
              "type": [Function],
            },
            null,
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing Header Component renders as expected with right button 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    onRightPress={[Function]}
    rightIcon="arrow-dropup"
    subtitle={null}
    subtitleNumberOfLines={1}
    title="Header"
    titleNumberOfLines={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Left) />,
        <Styled(Body)
          style={
            Object {
              "flex": 4,
            }
          }
        >
          <Styled(Title)
            numberOfLines={1}
            style={
              Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              }
            }
          >
            Header
          </Styled(Title)>
        </Styled(Body)>,
        <Styled(Right)>
          <Styled(Button)
            onPress={[Function]}
            transparent={true}
          >
            <Styled(Icon)
              name="arrow-dropup"
              style={
                Object {
                  "color": "#E03A00",
                }
              }
            />
          </Styled(Button)>
        </Styled(Right)>,
      ],
      "style": Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      "subtitle": null,
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>,
            null,
          ],
          "style": Object {
            "flex": 4,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Header",
              "numberOfLines": 1,
              "style": Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              },
              "virtual": undefined,
            },
            "ref": [Function],
            "rendered": "Header",
            "type": [Function],
          },
          null,
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(Button)
            onPress={[Function]}
            transparent={true}
          >
            <Styled(Icon)
              name="arrow-dropup"
              style={
                Object {
                  "color": "#E03A00",
                }
              }
            />
          </Styled(Button)>,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Icon)
              name="arrow-dropup"
              style={
                Object {
                  "color": "#E03A00",
                }
              }
            />,
            "onPress": [Function],
            "transparent": true,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "arrow-dropup",
              "style": Object {
                "color": "#E03A00",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Left) />,
          <Styled(Body)
            style={
              Object {
                "flex": 4,
              }
            }
          >
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>
          </Styled(Body)>,
          <Styled(Right)>
            <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="arrow-dropup"
                style={
                  Object {
                    "color": "#E03A00",
                  }
                }
              />
            </Styled(Button)>
          </Styled(Right)>,
        ],
        "style": Object {
          "height": "auto",
          "paddingBottom": 0.5,
        },
        "subtitle": null,
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Title)
                numberOfLines={1}
                style={
                  Object {
                    "fontSize": 15,
                    "fontWeight": "normal",
                    "textAlign": "justify",
                  }
                }
              >
                Header
              </Styled(Title)>,
              null,
            ],
            "style": Object {
              "flex": 4,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Header",
                "numberOfLines": 1,
                "style": Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                },
                "virtual": undefined,
              },
              "ref": [Function],
              "rendered": "Header",
              "type": [Function],
            },
            null,
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="arrow-dropup"
                style={
                  Object {
                    "color": "#E03A00",
                  }
                }
              />
            </Styled(Button)>,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Icon)
                name="arrow-dropup"
                style={
                  Object {
                    "color": "#E03A00",
                  }
                }
              />,
              "onPress": [Function],
              "transparent": true,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "arrow-dropup",
                "style": Object {
                  "color": "#E03A00",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing Header Component renders as expected with subtitle 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    onRightPress={[Function]}
    subtitle="None"
    subtitleNumberOfLines={1}
    title="Header"
    titleNumberOfLines={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Left) />,
        <Styled(Body)
          style={
            Object {
              "flex": 4,
            }
          }
        >
          <Styled(Title)
            numberOfLines={1}
            style={
              Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              }
            }
          >
            Header
          </Styled(Title)>
          <withAnimatable(Styled(Subtitle))
            delay={0}
            direction="normal"
            iterationCount={1}
            iterationDelay={0}
            numberOfLines={1}
            onAnimationBegin={[Function]}
            onAnimationEnd={[Function]}
            onTransitionBegin={[Function]}
            onTransitionEnd={[Function]}
            style={
              Object {
                "color": "#685A5C",
                "marginBottom": 5,
                "paddingTop": 5,
                "textAlign": "justify",
              }
            }
            useNativeDriver={false}
          >
            None
          </withAnimatable(Styled(Subtitle))>
        </Styled(Body)>,
        <Styled(Right) />,
      ],
      "style": Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      "subtitle": "None",
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>,
            <withAnimatable(Styled(Subtitle))
              delay={0}
              direction="normal"
              iterationCount={1}
              iterationDelay={0}
              numberOfLines={1}
              onAnimationBegin={[Function]}
              onAnimationEnd={[Function]}
              onTransitionBegin={[Function]}
              onTransitionEnd={[Function]}
              style={
                Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                }
              }
              useNativeDriver={false}
            >
              None
            </withAnimatable(Styled(Subtitle))>,
          ],
          "style": Object {
            "flex": 4,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Header",
              "numberOfLines": 1,
              "style": Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              },
              "virtual": undefined,
            },
            "ref": [Function],
            "rendered": "Header",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "animation": undefined,
              "children": "None",
              "delay": 0,
              "direction": "normal",
              "duration": undefined,
              "easing": undefined,
              "iterationCount": 1,
              "iterationDelay": 0,
              "numberOfLines": 1,
              "onAnimationBegin": [Function],
              "onAnimationEnd": [Function],
              "onTransitionBegin": [Function],
              "onTransitionEnd": [Function],
              "style": Object {
                "color": "#685A5C",
                "marginBottom": 5,
                "paddingTop": 5,
                "textAlign": "justify",
              },
              "transition": undefined,
              "useNativeDriver": false,
            },
            "ref": [Function],
            "rendered": "None",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Left) />,
          <Styled(Body)
            style={
              Object {
                "flex": 4,
              }
            }
          >
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>
            <withAnimatable(Styled(Subtitle))
              delay={0}
              direction="normal"
              iterationCount={1}
              iterationDelay={0}
              numberOfLines={1}
              onAnimationBegin={[Function]}
              onAnimationEnd={[Function]}
              onTransitionBegin={[Function]}
              onTransitionEnd={[Function]}
              style={
                Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                }
              }
              useNativeDriver={false}
            >
              None
            </withAnimatable(Styled(Subtitle))>
          </Styled(Body)>,
          <Styled(Right) />,
        ],
        "style": Object {
          "height": "auto",
          "paddingBottom": 0.5,
        },
        "subtitle": "None",
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Title)
                numberOfLines={1}
                style={
                  Object {
                    "fontSize": 15,
                    "fontWeight": "normal",
                    "textAlign": "justify",
                  }
                }
              >
                Header
              </Styled(Title)>,
              <withAnimatable(Styled(Subtitle))
                delay={0}
                direction="normal"
                iterationCount={1}
                iterationDelay={0}
                numberOfLines={1}
                onAnimationBegin={[Function]}
                onAnimationEnd={[Function]}
                onTransitionBegin={[Function]}
                onTransitionEnd={[Function]}
                style={
                  Object {
                    "color": "#685A5C",
                    "marginBottom": 5,
                    "paddingTop": 5,
                    "textAlign": "justify",
                  }
                }
                useNativeDriver={false}
              >
                None
              </withAnimatable(Styled(Subtitle))>,
            ],
            "style": Object {
              "flex": 4,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Header",
                "numberOfLines": 1,
                "style": Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                },
                "virtual": undefined,
              },
              "ref": [Function],
              "rendered": "Header",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "animation": undefined,
                "children": "None",
                "delay": 0,
                "direction": "normal",
                "duration": undefined,
                "easing": undefined,
                "iterationCount": 1,
                "iterationDelay": 0,
                "numberOfLines": 1,
                "onAnimationBegin": [Function],
                "onAnimationEnd": [Function],
                "onTransitionBegin": [Function],
                "onTransitionEnd": [Function],
                "style": Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                },
                "transition": undefined,
                "useNativeDriver": false,
              },
              "ref": [Function],
              "rendered": "None",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing Header Component renders as expected with subtitle and regarding line numbers 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    onRightPress={[Function]}
    subtitle="None"
    subtitleNumberOfLines={2}
    title="Header"
    titleNumberOfLines={2}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Left) />,
        <Styled(Body)
          style={
            Object {
              "flex": 4,
            }
          }
        >
          <Styled(Title)
            numberOfLines={2}
            style={
              Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              }
            }
          >
            Header
          </Styled(Title)>
          <withAnimatable(Styled(Subtitle))
            delay={0}
            direction="normal"
            iterationCount={1}
            iterationDelay={0}
            numberOfLines={2}
            onAnimationBegin={[Function]}
            onAnimationEnd={[Function]}
            onTransitionBegin={[Function]}
            onTransitionEnd={[Function]}
            style={
              Object {
                "color": "#685A5C",
                "marginBottom": 5,
                "paddingTop": 5,
                "textAlign": "justify",
              }
            }
            useNativeDriver={false}
          >
            None
          </withAnimatable(Styled(Subtitle))>
        </Styled(Body)>,
        <Styled(Right) />,
      ],
      "style": Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      "subtitle": "None",
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Title)
              numberOfLines={2}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>,
            <withAnimatable(Styled(Subtitle))
              delay={0}
              direction="normal"
              iterationCount={1}
              iterationDelay={0}
              numberOfLines={2}
              onAnimationBegin={[Function]}
              onAnimationEnd={[Function]}
              onTransitionBegin={[Function]}
              onTransitionEnd={[Function]}
              style={
                Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                }
              }
              useNativeDriver={false}
            >
              None
            </withAnimatable(Styled(Subtitle))>,
          ],
          "style": Object {
            "flex": 4,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Header",
              "numberOfLines": 2,
              "style": Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              },
              "virtual": undefined,
            },
            "ref": [Function],
            "rendered": "Header",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "animation": undefined,
              "children": "None",
              "delay": 0,
              "direction": "normal",
              "duration": undefined,
              "easing": undefined,
              "iterationCount": 1,
              "iterationDelay": 0,
              "numberOfLines": 2,
              "onAnimationBegin": [Function],
              "onAnimationEnd": [Function],
              "onTransitionBegin": [Function],
              "onTransitionEnd": [Function],
              "style": Object {
                "color": "#685A5C",
                "marginBottom": 5,
                "paddingTop": 5,
                "textAlign": "justify",
              },
              "transition": undefined,
              "useNativeDriver": false,
            },
            "ref": [Function],
            "rendered": "None",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Left) />,
          <Styled(Body)
            style={
              Object {
                "flex": 4,
              }
            }
          >
            <Styled(Title)
              numberOfLines={2}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>
            <withAnimatable(Styled(Subtitle))
              delay={0}
              direction="normal"
              iterationCount={1}
              iterationDelay={0}
              numberOfLines={2}
              onAnimationBegin={[Function]}
              onAnimationEnd={[Function]}
              onTransitionBegin={[Function]}
              onTransitionEnd={[Function]}
              style={
                Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                }
              }
              useNativeDriver={false}
            >
              None
            </withAnimatable(Styled(Subtitle))>
          </Styled(Body)>,
          <Styled(Right) />,
        ],
        "style": Object {
          "height": "auto",
          "paddingBottom": 0.5,
        },
        "subtitle": "None",
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Title)
                numberOfLines={2}
                style={
                  Object {
                    "fontSize": 15,
                    "fontWeight": "normal",
                    "textAlign": "justify",
                  }
                }
              >
                Header
              </Styled(Title)>,
              <withAnimatable(Styled(Subtitle))
                delay={0}
                direction="normal"
                iterationCount={1}
                iterationDelay={0}
                numberOfLines={2}
                onAnimationBegin={[Function]}
                onAnimationEnd={[Function]}
                onTransitionBegin={[Function]}
                onTransitionEnd={[Function]}
                style={
                  Object {
                    "color": "#685A5C",
                    "marginBottom": 5,
                    "paddingTop": 5,
                    "textAlign": "justify",
                  }
                }
                useNativeDriver={false}
              >
                None
              </withAnimatable(Styled(Subtitle))>,
            ],
            "style": Object {
              "flex": 4,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Header",
                "numberOfLines": 2,
                "style": Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                },
                "virtual": undefined,
              },
              "ref": [Function],
              "rendered": "Header",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "animation": undefined,
                "children": "None",
                "delay": 0,
                "direction": "normal",
                "duration": undefined,
                "easing": undefined,
                "iterationCount": 1,
                "iterationDelay": 0,
                "numberOfLines": 2,
                "onAnimationBegin": [Function],
                "onAnimationEnd": [Function],
                "onTransitionBegin": [Function],
                "onTransitionEnd": [Function],
                "style": Object {
                  "color": "#685A5C",
                  "marginBottom": 5,
                  "paddingTop": 5,
                  "textAlign": "justify",
                },
                "transition": undefined,
                "useNativeDriver": false,
              },
              "ref": [Function],
              "rendered": "None",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing Header Component renders as expected with title 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header
    onRightPress={[Function]}
    subtitle={null}
    subtitleNumberOfLines={1}
    title="Header"
    titleNumberOfLines={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Left) />,
        <Styled(Body)
          style={
            Object {
              "flex": 4,
            }
          }
        >
          <Styled(Title)
            numberOfLines={1}
            style={
              Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              }
            }
          >
            Header
          </Styled(Title)>
        </Styled(Body)>,
        <Styled(Right) />,
      ],
      "style": Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      "subtitle": null,
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>,
            null,
          ],
          "style": Object {
            "flex": 4,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Header",
              "numberOfLines": 1,
              "style": Object {
                "fontSize": 15,
                "fontWeight": "normal",
                "textAlign": "justify",
              },
              "virtual": undefined,
            },
            "ref": [Function],
            "rendered": "Header",
            "type": [Function],
          },
          null,
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Left) />,
          <Styled(Body)
            style={
              Object {
                "flex": 4,
              }
            }
          >
            <Styled(Title)
              numberOfLines={1}
              style={
                Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                }
              }
            >
              Header
            </Styled(Title)>
          </Styled(Body)>,
          <Styled(Right) />,
        ],
        "style": Object {
          "height": "auto",
          "paddingBottom": 0.5,
        },
        "subtitle": null,
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Title)
                numberOfLines={1}
                style={
                  Object {
                    "fontSize": 15,
                    "fontWeight": "normal",
                    "textAlign": "justify",
                  }
                }
              >
                Header
              </Styled(Title)>,
              null,
            ],
            "style": Object {
              "flex": 4,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Header",
                "numberOfLines": 1,
                "style": Object {
                  "fontSize": 15,
                  "fontWeight": "normal",
                  "textAlign": "justify",
                },
                "virtual": undefined,
              },
              "ref": [Function],
              "rendered": "Header",
              "type": [Function],
            },
            null,
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
