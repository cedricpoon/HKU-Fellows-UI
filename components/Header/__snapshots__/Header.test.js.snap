// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Header Component has right style 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={null}
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
  </Styled(Body)>
  <Styled(Right)>
    <Styled(Button)
      disabled={true}
      onLongPress={null}
      onPress={null}
      style={
        Array [
          Object {
            "width": null,
          },
          Object {
            "justifyContent": null,
          },
        ]
      }
      transparent={true}
    >
      <Styled(Icon)
        name="arrow-dropup"
        style={null}
      />
    </Styled(Button)>
  </Styled(Right)>
</Styled(Header)>
`;

exports[`Testing Header Component renders as expected with back button 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={null}
>
  <Styled(Left)>
    <Styled(Button)
      onPress={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      transparent={true}
    >
      <Styled(Icon)
        name="arrow-dropleft"
        style={
          Object {
            "color": "#4E4A47",
          }
        }
      />
    </Styled(Button)>
  </Styled(Left)>
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
  </Styled(Body)>
  <Styled(Right) />
</Styled(Header)>
`;

exports[`Testing Header Component renders as expected with right button 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={null}
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
  </Styled(Body)>
  <Styled(Right)>
    <Styled(Button)
      disabled={false}
      onLongPress={[Function]}
      onPress={[Function]}
      style={
        Array [
          Object {
            "width": null,
          },
          Object {
            "justifyContent": null,
          },
        ]
      }
      transparent={true}
    >
      <Styled(Icon)
        name="arrow-dropup"
        style={
          Object {
            "color": "#4E4A47",
          }
        }
      />
    </Styled(Button)>
  </Styled(Right)>
</Styled(Header)>
`;

exports[`Testing Header Component renders as expected with subtitle 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={
    Object {
      "context": "header",
    }
  }
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
    <withAnimatable(Styled(Subtitle))
      delay={0}
      direction="normal"
      iterationCount={1}
      iterationDelay={0}
      numberOfLines={1}
      onAnimationBegin={[Function]}
      onAnimationEnd={[Function]}
      onTransitionBegin={[Function]}
      onTransitionEnd={[Function]}
      style={
        Object {
          "color": "#685A5C",
          "marginBottom": 5,
          "marginTop": null,
          "textAlign": "justify",
        }
      }
      useNativeDriver={false}
    >
      header
    </withAnimatable(Styled(Subtitle))>
  </Styled(Body)>
  <Styled(Right) />
</Styled(Header)>
`;

exports[`Testing Header Component renders as expected with subtitle and regarding line numbers 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={
    Object {
      "context": "header",
      "numberOfLines": 2,
    }
  }
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={2}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
    <withAnimatable(Styled(Subtitle))
      delay={0}
      direction="normal"
      iterationCount={1}
      iterationDelay={0}
      numberOfLines={2}
      onAnimationBegin={[Function]}
      onAnimationEnd={[Function]}
      onTransitionBegin={[Function]}
      onTransitionEnd={[Function]}
      style={
        Object {
          "color": "#685A5C",
          "marginBottom": 5,
          "marginTop": null,
          "textAlign": "justify",
        }
      }
      useNativeDriver={false}
    >
      header
    </withAnimatable(Styled(Subtitle))>
  </Styled(Body)>
  <Styled(Right) />
</Styled(Header)>
`;

exports[`Testing Header Component renders as expected with title 1`] = `
<Styled(Header)
  animated={true}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={null}
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
  </Styled(Body)>
  <Styled(Right) />
</Styled(Header)>
`;

exports[`Testing Header Component renders without animation 1`] = `
<Styled(Header)
  animated={false}
  style={
    Array [
      Object {
        "height": "auto",
        "paddingBottom": 0.5,
      },
      null,
    ]
  }
  subtitle={
    Object {
      "context": "header",
    }
  }
>
  <Styled(Left) />
  <Styled(Body)
    style={
      Object {
        "flex": 4,
      }
    }
  >
    <Styled(Title)
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": null,
            "fontSize": 12.5,
            "fontWeight": "normal",
            "marginBottom": 5,
            "textAlign": "justify",
          },
          Object {},
        ]
      }
    >
      header
    </Styled(Title)>
    <withAnimatable(Styled(Subtitle))
      delay={0}
      direction="normal"
      iterationCount={1}
      iterationDelay={0}
      numberOfLines={1}
      onAnimationBegin={[Function]}
      onAnimationEnd={[Function]}
      onTransitionBegin={[Function]}
      onTransitionEnd={[Function]}
      style={
        Object {
          "color": "#685A5C",
          "marginBottom": 5,
          "marginTop": null,
          "textAlign": "justify",
        }
      }
      useNativeDriver={false}
    >
      header
    </withAnimatable(Styled(Subtitle))>
  </Styled(Body)>
  <Styled(Right) />
</Styled(Header)>
`;
