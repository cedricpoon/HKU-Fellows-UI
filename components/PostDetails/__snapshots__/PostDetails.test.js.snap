// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing PostDetails Component is selectedAnswer 1`] = `
<Styled(Content)
  style={
    Object {
      "paddingHorizontal": 15,
    }
  }
>
  <withAnimatable(Styled(ViewNB))
    animation="fadeIn"
    delay={0}
    direction="normal"
    duration={250}
    iterationCount={1}
    iterationDelay={0}
    onAnimationBegin={[Function]}
    onAnimationEnd={[Function]}
    onTransitionBegin={[Function]}
    onTransitionEnd={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomWidth": 0.5,
        "borderColor": "#eee",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 10,
      }
    }
    useNativeDriver={false}
  >
    <Styled(ViewNB)
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "paddingVertical": 1,
        }
      }
    >
      <Styled(Text)
        style={
          Object {
            "color": "gray",
            "fontSize": 10,
          }
        }
      >
        #
        1
      </Styled(Text)>
      <Styled(Text)
        style={
          Object {
            "color": "#3A936B",
            "fontSize": 12.5,
            "marginLeft": 5,
          }
        }
      >
        author
      </Styled(Text)>
      <Styled(Text)
        style={
          Object {
            "color": "#4E4A47",
            "fontSize": 12.5,
            "marginLeft": 5,
          }
        }
      >
        · 
        just now
      </Styled(Text)>
      <Styled(Icon)
        name="checkbox-marked-circle-outline"
        style={
          Object {
            "color": "#E5CB26",
            "fontSize": 10,
            "marginLeft": 5,
          }
        }
        type="MaterialCommunityIcons"
      />
      <Styled(Text)
        style={
          Object {
            "color": "#E5CB26",
            "fontSize": 10,
            "marginLeft": 5,
          }
        }
      >
        Adopted
      </Styled(Text)>
    </Styled(ViewNB)>
    <Styled(ViewNB)
      style={
        Object {
          "alignItems": "baseline",
          "backgroundColor": "white",
          "borderRadius": 5,
          "flexDirection": "row",
          "paddingLeft": 5,
          "paddingVertical": 1,
          "shadowColor": "#4E4A47",
          "shadowOffset": Object {
            "height": 1,
            "width": 1,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 1,
        }
      }
    >
      <Styled(Icon)
        name="ios-flame"
        style={
          Array [
            Object {
              "fontSize": 12.5,
              "marginRight": 5,
            },
            null,
          ]
        }
      />
      <Styled(Text)
        style={
          Array [
            Object {
              "fontSize": 12.5,
              "marginRight": 5,
            },
            null,
          ]
        }
      >
        1
      </Styled(Text)>
    </Styled(ViewNB)>
  </withAnimatable(Styled(ViewNB))>
  <withAnimatable(Styled(ViewNB))
    animation="fadeIn"
    delay={0}
    direction="normal"
    duration={250}
    iterationCount={1}
    iterationDelay={0}
    onAnimationBegin={[Function]}
    onAnimationEnd={[Function]}
    onTransitionBegin={[Function]}
    onTransitionEnd={[Function]}
    useNativeDriver={false}
  >
    <TouchableOpacity
      activeOpacity={0.5}
      onLongPress={[Function]}
      style={
        Object {
          "marginVertical": 5,
        }
      }
    >
      <View />
    </TouchableOpacity>
  </withAnimatable(Styled(ViewNB))>
</Styled(Content)>
`;

exports[`Testing PostDetails Component renders as expected with required props 1`] = `
<Styled(Content)
  style={
    Object {
      "paddingHorizontal": 15,
    }
  }
>
  <withAnimatable(Styled(ViewNB))
    animation="fadeIn"
    delay={0}
    direction="normal"
    duration={250}
    iterationCount={1}
    iterationDelay={0}
    onAnimationBegin={[Function]}
    onAnimationEnd={[Function]}
    onTransitionBegin={[Function]}
    onTransitionEnd={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderBottomWidth": 0.5,
        "borderColor": "#eee",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 10,
      }
    }
    useNativeDriver={false}
  >
    <Styled(ViewNB)
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "paddingVertical": 1,
        }
      }
    >
      <Styled(Text)
        style={
          Object {
            "color": "gray",
            "fontSize": 10,
          }
        }
      >
        #
        1
      </Styled(Text)>
      <Styled(Text)
        style={
          Object {
            "color": "#3A936B",
            "fontSize": 12.5,
            "marginLeft": 5,
          }
        }
      >
        author
      </Styled(Text)>
      <Styled(Text)
        style={
          Object {
            "color": "#4E4A47",
            "fontSize": 12.5,
            "marginLeft": 5,
          }
        }
      >
        · 
        just now
      </Styled(Text)>
    </Styled(ViewNB)>
    <Styled(ViewNB)
      style={
        Object {
          "alignItems": "baseline",
          "backgroundColor": "white",
          "borderRadius": 5,
          "flexDirection": "row",
          "paddingLeft": 5,
          "paddingVertical": 1,
          "shadowColor": "#4E4A47",
          "shadowOffset": Object {
            "height": 1,
            "width": 1,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 1,
        }
      }
    >
      <Styled(Icon)
        name="ios-flame"
        style={
          Array [
            Object {
              "fontSize": 12.5,
              "marginRight": 5,
            },
            null,
          ]
        }
      />
      <Styled(Text)
        style={
          Array [
            Object {
              "fontSize": 12.5,
              "marginRight": 5,
            },
            null,
          ]
        }
      >
        1
      </Styled(Text)>
    </Styled(ViewNB)>
  </withAnimatable(Styled(ViewNB))>
  <withAnimatable(Styled(ViewNB))
    animation="fadeIn"
    delay={0}
    direction="normal"
    duration={250}
    iterationCount={1}
    iterationDelay={0}
    onAnimationBegin={[Function]}
    onAnimationEnd={[Function]}
    onTransitionBegin={[Function]}
    onTransitionEnd={[Function]}
    useNativeDriver={false}
  >
    <TouchableOpacity
      activeOpacity={0.5}
      onLongPress={[Function]}
      style={
        Object {
          "marginVertical": 5,
        }
      }
    >
      <View />
    </TouchableOpacity>
  </withAnimatable(Styled(ViewNB))>
</Styled(Content)>
`;
