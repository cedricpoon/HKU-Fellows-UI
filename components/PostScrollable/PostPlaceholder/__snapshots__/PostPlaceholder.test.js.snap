// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing PostPlaceholder Component renders as expected with headline colored 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PostPlaceholder
    headline=""
    headlineColor="green"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Body)>
        <Styled(Text)
          style={
            Object {
              "color": "green",
            }
          }
        >
          
        </Styled(Text)>
      </Styled(Body)>,
      "style": Object {
        "marginVertical": 25,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Text)
            style={
              Object {
                "color": "green",
              }
            }
          >
            
          </Styled(Text)>,
          undefined,
        ],
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
            "style": Object {
              "color": "green",
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Body)>
          <Styled(Text)
            style={
              Object {
                "color": "green",
              }
            }
          >
            
          </Styled(Text)>
        </Styled(Body)>,
        "style": Object {
          "marginVertical": 25,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "color": "green",
                }
              }
            >
              
            </Styled(Text)>,
            undefined,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "",
              "style": Object {
                "color": "green",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": [Function],
          },
          undefined,
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing PostPlaceholder Component renders as expected with required props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PostPlaceholder
    headline=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Body)>
        <Styled(Text)
          style={
            Object {
              "color": undefined,
            }
          }
        >
          
        </Styled(Text)>
      </Styled(Body)>,
      "style": Object {
        "marginVertical": 25,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>,
          undefined,
        ],
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
            "style": Object {
              "color": undefined,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Body)>
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>
        </Styled(Body)>,
        "style": Object {
          "marginVertical": 25,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "color": undefined,
                }
              }
            >
              
            </Styled(Text)>,
            undefined,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "",
              "style": Object {
                "color": undefined,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": [Function],
          },
          undefined,
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing PostPlaceholder Component renders as expected with subHeadline 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PostPlaceholder
    headline=""
    subHeadline=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Body)>
        <Styled(Text)
          style={
            Object {
              "color": undefined,
            }
          }
        >
          
        </Styled(Text)>
        
      </Styled(Body)>,
      "style": Object {
        "marginVertical": 25,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>,
          "",
        ],
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
            "style": Object {
              "color": undefined,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
        "",
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Body)>
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>
          
        </Styled(Body)>,
        "style": Object {
          "marginVertical": 25,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "color": undefined,
                }
              }
            >
              
            </Styled(Text)>,
            "",
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "",
              "style": Object {
                "color": undefined,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": [Function],
          },
          "",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Testing PostPlaceholder Component renders as expected with subHeadline and icon 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PostPlaceholder
    headline=""
    icon={
      Object {
        "name": "apps",
      }
    }
    subHeadline=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Body)>
        <Styled(Text)
          style={
            Object {
              "color": undefined,
            }
          }
        >
          
        </Styled(Text)>
        
      </Styled(Body)>,
      "style": Object {
        "marginVertical": 25,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>,
          "",
        ],
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "",
            "style": Object {
              "color": undefined,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": "",
          "type": [Function],
        },
        "",
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Body)>
          <Styled(Text)
            style={
              Object {
                "color": undefined,
              }
            }
          >
            
          </Styled(Text)>
          
        </Styled(Body)>,
        "style": Object {
          "marginVertical": 25,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "color": undefined,
                }
              }
            >
              
            </Styled(Text)>,
            "",
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "",
              "style": Object {
                "color": undefined,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": [Function],
          },
          "",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
